diff --git a/target/riscv/cpu.c b/target/riscv/cpu.c
index 83c7c0cf07..a713c90836 100644
--- a/target/riscv/cpu.c
+++ b/target/riscv/cpu.c
@@ -717,6 +717,8 @@ static void riscv_cpu_dump_state(CPUState *cs, FILE *f, int flags)
             CSR_SPMMASK,
             CSR_MPMBASE,
             CSR_MPMMASK,
+            /* CFU */
+            CSR_MCFU_SELECTOR, 
         };
 
         for (i = 0; i < ARRAY_SIZE(dump_csrs); ++i) {
diff --git a/target/riscv/cpu.h b/target/riscv/cpu.h
index d74b361be6..6a65f69bf8 100644
--- a/target/riscv/cpu.h
+++ b/target/riscv/cpu.h
@@ -149,6 +149,9 @@ struct CPUArchState {
     target_ulong vtype;
     bool vill;
 
+    /* CFU */
+    target_ulong mcfu_selector; 
+
     target_ulong pc;
     target_ulong load_res;
     target_ulong load_val;
diff --git a/target/riscv/cpu_bits.h b/target/riscv/cpu_bits.h
index ebd7917d49..cc43d1aa28 100644
--- a/target/riscv/cpu_bits.h
+++ b/target/riscv/cpu_bits.h
@@ -68,6 +68,9 @@
 #define CSR_VTYPE           0xc21
 #define CSR_VLENB           0xc22
 
+/* CFU */
+#define CSR_MCFU_SELECTOR   0xBC0
+
 /* VCSR fields */
 #define VCSR_VXSAT_SHIFT    0
 #define VCSR_VXSAT          (0x1 << VCSR_VXSAT_SHIFT)
diff --git a/target/riscv/csr.c b/target/riscv/csr.c
index c50a33397c..5e96b5557e 100644
--- a/target/riscv/csr.c
+++ b/target/riscv/csr.c
@@ -4471,6 +4471,25 @@ static RISCVException write_jvt(CPURISCVState *env, int csrno,
     return RISCV_EXCP_NONE;
 }
 
+
+static RISCVException read_mcfu_selector(CPURISCVState *env, int csrno,
+                                target_ulong *val)
+{
+    *val = env->mcfu_selector;
+    return RISCV_EXCP_NONE;
+}
+ 
+static RISCVException write_mcfu_selector(CPURISCVState *env, int csrno,
+                                 target_ulong val)
+{
+#if !defined(CONFIG_USER_ONLY)
+    env->mstatus |= MSTATUS_VS;
+#endif
+    env->mcfu_selector = val;
+    return RISCV_EXCP_NONE;
+}
+
+
 /*
  * Control and Status Register function table
  * riscv_csr_operations::predicate() must be provided for an implemented CSR
@@ -4507,6 +4526,12 @@ riscv_csr_operations csr_ops[CSR_TABLE_SIZE] = {
     /* Zcmt Extension */
     [CSR_JVT] = {"jvt", zcmt, read_jvt, write_jvt},
 
+    /* CFU 
+    * Note: This should be defined as a machine mode CSR, but I'm not sure how to 
+    *       configure the build to allow machine mode
+    */
+    [CSR_MCFU_SELECTOR] = { "mcfu_selector", fs, read_mcfu_selector, write_mcfu_selector },
+
 #if !defined(CONFIG_USER_ONLY)
     /* Machine Timers and Counters */
     [CSR_MCYCLE]    = { "mcycle",    any,   read_hpmcounter,
diff --git a/target/riscv/helper.h b/target/riscv/helper.h
index 8a63523851..cb1026cdb2 100644
--- a/target/riscv/helper.h
+++ b/target/riscv/helper.h
@@ -85,6 +85,9 @@ DEF_HELPER_FLAGS_1(zip, TCG_CALL_NO_RWG_SE, tl, tl)
 DEF_HELPER_FLAGS_2(xperm4, TCG_CALL_NO_RWG_SE, tl, tl, tl)
 DEF_HELPER_FLAGS_2(xperm8, TCG_CALL_NO_RWG_SE, tl, tl, tl)
 
+/* CFU */
+DEF_HELPER_4(cfu_reg, tl, env, tl, tl, tl)
+
 /* Floating Point - Half Precision */
 DEF_HELPER_FLAGS_3(fadd_h, TCG_CALL_NO_RWG, i64, env, i64, i64)
 DEF_HELPER_FLAGS_3(fsub_h, TCG_CALL_NO_RWG, i64, env, i64, i64)
diff --git a/target/riscv/insn32.decode b/target/riscv/insn32.decode
index 33597fe2bb..7c36608bfd 100644
--- a/target/riscv/insn32.decode
+++ b/target/riscv/insn32.decode
@@ -39,6 +39,9 @@
 %imm_rnum 20:4
 %imm_z6   26:1 15:5
 
+# CFU
+%cf_id    25:s7 12:3
+
 # Argument sets:
 &empty
 &b    imm rs2 rs1
@@ -98,6 +101,9 @@
 @k_aes   .. ..... ..... .....  ... ..... ....... &k_aes  shamt=%imm_bs   %rs2 %rs1 %rd
 @i_aes   .. ..... ..... .....  ... ..... ....... &i      imm=%imm_rnum        %rs1 %rd
 
+# Formats CFU:
+@cfu_r   ....... ..... ..... ... ..... ....... %cf_id %rd %rs1 %rs2
+
 # Formats 64:
 @sh5     .......  ..... .....  ... ..... ....... &shift  shamt=%sh5      %rs1 %rd
 
@@ -1004,3 +1010,6 @@ vgmul_vv    101000 1 ..... 10001 010 ..... 1110111 @r2_vm_1
 vsm4k_vi    100001 1 ..... ..... 010 ..... 1110111 @r_vm_1
 vsm4r_vv    101000 1 ..... 10000 010 ..... 1110111 @r2_vm_1
 vsm4r_vs    101001 1 ..... 10000 010 ..... 1110111 @r2_vm_1
+
+# *** CFU ***
+cfu_reg     ....... ..... ..... ... ..... 0001011 @cfu_r
\ No newline at end of file
diff --git a/target/riscv/machine.c b/target/riscv/machine.c
index fdde243e04..219d3eb920 100644
--- a/target/riscv/machine.c
+++ b/target/riscv/machine.c
@@ -409,6 +409,9 @@ const VMStateDescription vmstate_riscv_cpu = {
         VMSTATE_UINTTL(env.mscratch, RISCVCPU),
         VMSTATE_UINT64(env.stimecmp, RISCVCPU),
 
+        /* CFU */
+        VMSTATE_UINTTL(env.mcfu_selector, RISCVCPU),
+
         VMSTATE_END_OF_LIST()
     },
     .subsections = (const VMStateDescription * []) {
diff --git a/target/riscv/meson.build b/target/riscv/meson.build
index a5e0734e7f..4d530cbd06 100644
--- a/target/riscv/meson.build
+++ b/target/riscv/meson.build
@@ -22,7 +22,8 @@ riscv_ss.add(files(
   'm128_helper.c',
   'crypto_helper.c',
   'zce_helper.c',
-  'vcrypto_helper.c'
+  'vcrypto_helper.c',
+  'cfu_helper.c'
 ))
 
 riscv_system_ss = ss.source_set()
diff --git a/target/riscv/translate.c b/target/riscv/translate.c
index f0be79bb16..63e333260e 100644
--- a/target/riscv/translate.c
+++ b/target/riscv/translate.c
@@ -1102,6 +1102,9 @@ static uint32_t opcode_at(DisasContextBase *dcbase, target_ulong pc)
 #include "insn_trans/trans_xthead.c.inc"
 #include "insn_trans/trans_xventanacondops.c.inc"
 
+/* CFU */
+#include "insn_trans/trans_cfu.c.inc"
+
 /* Include the auto-generated decoder for 16 bit insn */
 #include "decode-insn16.c.inc"
 #include "insn_trans/trans_rvzce.c.inc"
