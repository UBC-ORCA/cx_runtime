diff --git a/machine/encoding.h b/machine/encoding.h
index a9de9ef..208ec9b 100644
--- a/machine/encoding.h
+++ b/machine/encoding.h
@@ -3183,6 +3183,7 @@
 #define CSR_MHPMCOUNTER29H 0xb9d
 #define CSR_MHPMCOUNTER30H 0xb9e
 #define CSR_MHPMCOUNTER31H 0xb9f
+#define CSR_MCX_TABLE 0x802
 #define CAUSE_MISALIGNED_FETCH 0x0
 #define CAUSE_FETCH_ACCESS 0x1
 #define CAUSE_ILLEGAL_INSTRUCTION 0x2
@@ -4810,6 +4811,8 @@ DECLARE_CSR(mhpmcounter28h, CSR_MHPMCOUNTER28H)
 DECLARE_CSR(mhpmcounter29h, CSR_MHPMCOUNTER29H)
 DECLARE_CSR(mhpmcounter30h, CSR_MHPMCOUNTER30H)
 DECLARE_CSR(mhpmcounter31h, CSR_MHPMCOUNTER31H)
+DECLARE_CSR(mcx_table, CSR_MCX_TABLE)
+
 #endif
 #ifdef DECLARE_CAUSE
 DECLARE_CAUSE("misaligned fetch", CAUSE_MISALIGNED_FETCH)
@@ -7705,6 +7708,7 @@ DECLARE_CAUSE("store guest page fault", CAUSE_STORE_GUEST_PAGE_FAULT)
 #define CSR_MHPMCOUNTER29H 0xb9d
 #define CSR_MHPMCOUNTER30H 0xb9e
 #define CSR_MHPMCOUNTER31H 0xb9f
+#define CSR_MCX_TABLE 0x802
 #define CAUSE_MISALIGNED_FETCH 0x0
 #define CAUSE_FETCH_ACCESS 0x1
 #define CAUSE_ILLEGAL_INSTRUCTION 0x2
@@ -9332,6 +9336,7 @@ DECLARE_CSR(mhpmcounter28h, CSR_MHPMCOUNTER28H)
 DECLARE_CSR(mhpmcounter29h, CSR_MHPMCOUNTER29H)
 DECLARE_CSR(mhpmcounter30h, CSR_MHPMCOUNTER30H)
 DECLARE_CSR(mhpmcounter31h, CSR_MHPMCOUNTER31H)
+DECLARE_CSR(mcx_table, CSR_MCX_TABLE)
 #endif
 #ifdef DECLARE_CAUSE
 DECLARE_CAUSE("misaligned fetch", CAUSE_MISALIGNED_FETCH)
@@ -12227,6 +12232,7 @@ DECLARE_CAUSE("store guest page fault", CAUSE_STORE_GUEST_PAGE_FAULT)
 #define CSR_MHPMCOUNTER29H 0xb9d
 #define CSR_MHPMCOUNTER30H 0xb9e
 #define CSR_MHPMCOUNTER31H 0xb9f
+#define CSR_MCX_TABLE 0x802
 #define CAUSE_MISALIGNED_FETCH 0x0
 #define CAUSE_FETCH_ACCESS 0x1
 #define CAUSE_ILLEGAL_INSTRUCTION 0x2
@@ -13854,6 +13860,7 @@ DECLARE_CSR(mhpmcounter28h, CSR_MHPMCOUNTER28H)
 DECLARE_CSR(mhpmcounter29h, CSR_MHPMCOUNTER29H)
 DECLARE_CSR(mhpmcounter30h, CSR_MHPMCOUNTER30H)
 DECLARE_CSR(mhpmcounter31h, CSR_MHPMCOUNTER31H)
+DECLARE_CSR(mcx_table, CSR_MCX_TABLE)
 #endif
 #ifdef DECLARE_CAUSE
 DECLARE_CAUSE("misaligned fetch", CAUSE_MISALIGNED_FETCH)
diff --git a/machine/fdt.c b/machine/fdt.c
index 4ec1530..ae5942b 100644
--- a/machine/fdt.c
+++ b/machine/fdt.c
@@ -237,9 +237,11 @@ static void hart_open(const struct fdt_scan_node *node, void *extra)
 static void hart_prop(const struct fdt_scan_prop *prop, void *extra)
 {
   struct hart_scan *scan = (struct hart_scan *)extra;
+
   if (!strcmp(prop->name, "device_type") && !strcmp((const char*)prop->value, "cpu")) {
     assert (!scan->cpu);
     scan->cpu = prop->node;
+    printm("cpu: %s\n", scan->cpu->name);
   } else if (!strcmp(prop->name, "interrupt-controller")) {
     assert (!scan->controller);
     scan->controller = prop->node;
@@ -509,6 +511,55 @@ void filter_plic(uintptr_t fdt)
   fdt_scan(fdt, &cb);
 }
 
+
+//////////////////////////////////////////// CXU_SCAN //////////////////////////////////////
+
+struct cxu_scan {
+  int num_states;
+  int cxu_guid;
+};
+
+static void cxu_open(const struct fdt_scan_node *node, void *extra)
+{
+  struct cxu_scan *scan = (struct cxu_scan *)extra;
+  scan->num_states = 0;
+  scan->cxu_guid = 0;
+}
+
+static void cxu_prop(const struct fdt_scan_prop *prop, void *extra)
+{
+  struct cxu_scan *scan = (struct cxu_scan *)extra;
+  if (!strcmp(prop->name, "cx_guid")) {
+    scan->cxu_guid = bswap(prop->value[0]);
+  } else if (!strcmp(prop->name, "num_states")) {
+    scan->num_states = bswap(prop->value[0]);
+  }
+}
+
+static void cxu_done(const struct fdt_scan_node *node, void *extra)
+{
+  struct cxu_scan *scan = (struct cxu_scan *)extra;
+
+  assert (scan->num_states >= 0);
+  assert (scan->cxu_guid >= 0);
+}
+
+void query_cxu(uintptr_t fdt)
+{
+  struct fdt_cb cb;
+  struct plic_scan scan;
+
+  memset(&cb, 0, sizeof(cb));
+  cb.open = cxu_open;
+  cb.prop = cxu_prop;
+  cb.done = cxu_done;
+  cb.extra = &scan;
+
+  scan.done = 0;
+  fdt_scan(fdt, &cb);
+}
+
+
 //////////////////////////////////////////// COMPAT SCAN ////////////////////////////////////////
 
 struct compat_scan
diff --git a/machine/minit.c b/machine/minit.c
index e6677e9..3d47014 100644
--- a/machine/minit.c
+++ b/machine/minit.c
@@ -192,6 +192,8 @@ void init_first_hart(uintptr_t hartid, uintptr_t dtb)
   query_uart_litex(dtb);
   query_htif(dtb);
   printm("bbl loader\r\n");
+  printm("dest: %08x\n", &dtb);
+
 
   hart_init();
   hls_init(0); // this might get called again from parse_config_string
diff --git a/pk/mmap.c b/pk/mmap.c
index dd0fe59..c755322 100644
--- a/pk/mmap.c
+++ b/pk/mmap.c
@@ -9,6 +9,8 @@
 #include <stdint.h>
 #include <stdbool.h>
 #include <errno.h>
+#include "queue.h"
+#include "ci.h"
 
 uintptr_t kva2pa_offset;
 
@@ -26,6 +28,8 @@ static vmr_t* vmr_freelist_head;
 
 static pte_t* root_page_table;
 
+static pte_t* cx_table;
+
 #define RISCV_PGLEVELS ((VA_BITS - RISCV_PGSHIFT) / RISCV_PGLEVEL_BITS)
 
 static spinlock_t vm_lock = SPINLOCK_INIT;
@@ -45,6 +49,8 @@ typedef struct freelist_node_t {
 size_t page_freelist_depth;
 static freelist_node_t* page_freelist_storage;
 
+queue_t *cx_table_freelist;
+
 static uintptr_t free_page_addr(size_t idx)
 {
   return first_free_page + idx * RISCV_PGSIZE;
@@ -368,8 +374,9 @@ uintptr_t __do_mmap(uintptr_t addr, size_t length, int prot, int flags, file_t*
 
   if (flags & MAP_FIXED)
   {
-    if ((addr & (RISCV_PGSIZE-1)) || !__valid_user_range(addr, length))
+    if ((addr & (RISCV_PGSIZE-1)) || !__valid_user_range(addr, length)) {
       return (uintptr_t)-1;
+    }
   }
   else if ((addr = __vm_alloc(npage)) == 0)
     return (uintptr_t)-1;
@@ -559,12 +566,83 @@ static void init_early_alloc()
   free_pages = (mem_size - (first_free_page - MEM_START)) / RISCV_PGSIZE;
 }
 
+
+queue_t* make_queue(int32_t capacity)
+{
+    queue_t* queue = (queue_t *) __early_alloc(sizeof(queue_t));
+
+    if (queue == NULL) {
+        return NULL;
+    }
+
+    queue->arr = (int32_t *)__early_alloc(sizeof(int32_t) * capacity);
+
+    if (queue->arr == NULL) {
+        // free(queue);
+        return NULL;
+    }
+
+    queue->capacity = capacity;
+    queue->front = queue->size = 0;
+
+    // This is important, see the enqueue
+    queue->rear = capacity - 1;
+    for (int32_t i = 0; i < capacity; i++) {
+        enqueue(queue, i);
+    }
+
+    return queue;
+}
+
+cx_map_t cx_map;
+void init_cx_map(int32_t num_cxs) 
+{
+    int num_states = 2;
+
+    cx_map = (cx_map_t) __early_alloc(sizeof(cx_map_entry_t) * num_cxs);
+    /* Check and see if malloc fails, throw an error if it fails, write in spec
+       what will happen if it fails. */
+    
+    // cx_config_info_t cx_config_info = read_files(paths, num_cxs);
+
+    // NUM_CX_IDS = num_cxs;
+
+    for (int32_t i = 0; i < num_cxs; i++) {
+        cx_map[i].cx_guid = 11;
+
+        // Make sure that in the case of stateless cx's, this has a queue of size 1
+        cx_map[i].avail_state_ids = make_queue(num_states);
+        cx_map[i].counter = 0;
+        cx_map[i].num_state_ids = num_states;
+
+        // in the case of a stateless cx, still need to allocate 1 slot
+        // TODO: indicies spelling
+        int32_t num_cx_sel_indicies = (num_states == 0) ? 
+            1 : num_states; 
+
+        // -1 means that it is an unassigned state_id
+        // TODO: might be better to be a typed thing vs. enum
+        cx_map[i].cx_sel_map_index = -1;
+    }
+    cx_map[1].cx_guid = 4;
+    cx_map[1].num_state_ids = 1;
+}
+
 uintptr_t pk_vm_init()
 {
   init_early_alloc();
+  cx_table_freelist = make_queue(1024);
+  init_cx_map(NUM_CX_IDS);
+  uintptr_t temp;
+  vmr_t *vmr = __vmr_alloc(temp, 100, 0, 0, 0, 0);
+  printk("cx_map_addr: %08x\n", &cx_map);
+  printk("temp addr: %08x\n", &temp);
 
   size_t num_freelist_nodes = mem_size / RISCV_PGSIZE;
   page_freelist_storage = (freelist_node_t*)__early_alloc(num_freelist_nodes * sizeof(freelist_node_t));
+  cx_table = (void*)__page_alloc_assert();
+
+  write_csr(0x802, (uintptr_t)cx_table);
 
   root_page_table = (void*)__page_alloc_assert();
   __map_kernel_range(KVA_START, MEM_START, mem_size, PROT_READ|PROT_WRITE|PROT_EXEC);
@@ -573,11 +651,11 @@ uintptr_t pk_vm_init()
   write_csr(satp, ((uintptr_t)root_page_table >> RISCV_PGSHIFT) | SATP_MODE_CHOICE);
 
   uintptr_t kernel_stack_top = __page_alloc_assert() + RISCV_PGSIZE;
-
   // relocate
   kva2pa_offset = KVA_START - MEM_START;
   page_freelist_storage = (void*)pa2kva(page_freelist_storage);
   root_page_table = (void*)pa2kva(root_page_table);
+  cx_table = (void*)pa2kva(cx_table);
 
   return kernel_stack_top;
 }
diff --git a/pk/mmap.h b/pk/mmap.h
index 949b9a7..b7d947f 100644
--- a/pk/mmap.h
+++ b/pk/mmap.h
@@ -8,6 +8,8 @@
 #include "encoding.h"
 #include "file.h"
 #include "mtrap.h"
+#include "queue.h"
+#include "ci.h"
 #include <stddef.h>
 
 #define PROT_NONE 0
@@ -23,6 +25,8 @@
 
 extern int demand_paging;
 extern uint64_t randomize_mapping;
+extern queue_t *cx_table_freelist;
+extern cx_map_t cx_map;
 
 uintptr_t pk_vm_init();
 int handle_page_fault(uintptr_t vaddr, int prot);
diff --git a/pk/pk.c b/pk/pk.c
index b8c9337..9a362fe 100644
--- a/pk/pk.c
+++ b/pk/pk.c
@@ -11,6 +11,9 @@
 #include "flush_icache.h"
 #include <stdbool.h>
 
+#define MCX_TABLE_NUM_ELEMENTS 1024
+#define MCX_TABLE_SIZE MCX_TABLE_NUM_ELEMENTS * sizeof(int)
+
 elf_info current;
 long disabled_hart_mask;
 
@@ -95,11 +98,13 @@ static void run_loaded_program(size_t argc, char** argv, uintptr_t kstack_top)
   size_t mem_pages = mem_size >> RISCV_PGSHIFT;
   size_t stack_size = MIN(mem_pages >> 5, 2048) * RISCV_PGSIZE;
   size_t stack_bottom = __do_mmap(current.mmap_max - stack_size, stack_size, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);
+  // printk("stack_bottom_size: %08x\n", stack_bottom);
   kassert(stack_bottom != (uintptr_t)-1);
   current.stack_top = stack_bottom + stack_size;
 
   // copy phdrs to user stack
   size_t stack_top = current.stack_top - current.phdr_size;
+
   memcpy_to_user((void*)stack_top, (void*)current.phdr, current.phdr_size);
   current.phdr = stack_top;
 
@@ -140,6 +145,17 @@ static void run_loaded_program(size_t argc, char** argv, uintptr_t kstack_top)
     {AT_NULL, 0}
   };
 
+  // I don't think this is needed - honestly not sure what the point of these
+  // copys to user stack do, as it's done again in STACK_INIT();
+
+  // int cx_table[MCX_TABLE_NUM_ELEMENTS] = {0};
+  // for (size_t i = 0; i < MCX_TABLE_NUM_ELEMENTS; i++) {
+  //   size_t len = sizeof(int);
+  //   stack_top -= len;
+  //   // memcpy_to_user((void*)stack_top, &cx_table[i], len);
+  //   // cx_table[i] = (void*)stack_top;
+  // }
+
   // place argc, argv, envp, auxp on stack
   #define PUSH_ARG(type, value) do { \
     type __tmp = (type)(value); \
@@ -163,7 +179,13 @@ static void run_loaded_program(size_t argc, char** argv, uintptr_t kstack_top)
       PUSH_ARG(type, aux[i].key); \
       PUSH_ARG(type, aux[i].value); \
     } \
-  } while (0)
+    stack_top -= (MCX_TABLE_NUM_ELEMENTS) * sizeof(type); \
+    stack_top &= -MCX_TABLE_SIZE; \
+    sp = (void*)stack_top; \
+    for (unsigned i = 0; i < MCX_TABLE_NUM_ELEMENTS; i++) { \
+      PUSH_ARG(type, 0x08000000); \
+    } \
+  } while (0)     
 
   STACK_INIT(uintptr_t);
 
@@ -173,10 +195,17 @@ static void run_loaded_program(size_t argc, char** argv, uintptr_t kstack_top)
     current.instret0 = rdinstret64();
   }
 
+  // 0x802 is mcx_table
+  // write_csr(0x802, stack_top);
+  // stack_top &= -16;
+
   trapframe_t tf;
   init_tf(&tf, current.entry, stack_top);
   __riscv_flush_icache();
   write_csr(sscratch, kstack_top);
+  
+  // printk("stack_size: %08x, stack_bottom: %08x, kstack_top: %08x, stack_top: %08x, final stack_top: %08x\n", stack_size, stack_bottom, current.stack_top, kstack_top, stack_top);
+
   start_user(&tf);
 }
 
@@ -209,7 +238,7 @@ void rest_of_boot_loader_2(uintptr_t kstack_top)
 void boot_loader(uintptr_t dtb)
 {
   uintptr_t kernel_stack_top = pk_vm_init();
-
+  
   extern char trap_entry;
   write_csr(stvec, pa2kva(&trap_entry));
   write_csr(sscratch, 0);
diff --git a/pk/pk.mk.in b/pk/pk.mk.in
index 3eb858d..4deb3e5 100644
--- a/pk/pk.mk.in
+++ b/pk/pk.mk.in
@@ -6,6 +6,8 @@ pk_subproject_deps = \
 	machine \
 
 pk_hdrs = \
+	queue.h \
+	ci.h \
 	boot.h \
 	elf.h \
 	file.h \
@@ -16,6 +18,8 @@ pk_hdrs = \
 	usermem.h \
 
 pk_c_srcs = \
+    queue.c \
+	ci.c \
 	file.c \
 	syscall.c \
 	handlers.c \
diff --git a/pk/syscall.c b/pk/syscall.c
index bda4393..7497a51 100644
--- a/pk/syscall.c
+++ b/pk/syscall.c
@@ -1,5 +1,6 @@
 // See LICENSE for license details.
 
+#include "atomic.h"
 #include "syscall.h"
 #include "pk.h"
 #include "file.h"
@@ -10,9 +11,12 @@
 #include "usermem.h"
 #include <string.h>
 #include <errno.h>
+#include "queue.h"
 
 typedef long (*syscall_t)(long, long, long, long, long, long, long);
 
+static spinlock_t vm_lock = SPINLOCK_INIT;
+
 #define CLOCK_FREQ 1000000000
 
 #define MAX_BUF 512
@@ -531,6 +535,7 @@ int sys_gettimeofday(long* loc)
 
 long sys_clock_gettime(int clk_id, long *loc)
 {
+  printk("clk_id: %d, loc: %08x\n", clk_id, loc);
   uint64_t t = rdcycle64();
 
   long kloc[2];
@@ -587,6 +592,26 @@ static int sys_stub_nosys()
   return -ENOSYS;
 }
 
+// This shouldn't be a void function - should return a 
+// the value of the index... idk where it gets returned though
+int sys_cx_open(int cx_guid) {
+  uint32_t *mcx_table_p = (uint32_t *)read_csr(0x802);
+
+  int temp = cx_guid;
+  int *cx_guid_p = &temp;
+  spinlock_lock(&vm_lock);
+
+  int32_t cx_index = __cx_open(cx_guid, 0, cx_table_freelist, cx_map, mcx_table_p);
+  
+  spinlock_unlock(&vm_lock);
+  
+  return cx_index;
+}
+
+int sys_cx_close(int cx_sel) {
+  return 0;
+}
+
 long do_syscall(long a0, long a1, long a2, long a3, long a4, long a5, unsigned long n)
 {
   const static void* syscall_table[] = {
@@ -632,6 +657,8 @@ long do_syscall(long a0, long a1, long a2, long a3, long a4, long a5, unsigned l
     [SYS_rt_sigprocmask] = sys_stub_success,
     [SYS_clock_gettime] = sys_clock_gettime,
     [SYS_chdir] = sys_chdir,
+    [SYS_cx_open] = sys_cx_open,
+    [SYS_cx_close] = sys_cx_close,
   };
 
   const static void* old_syscall_table[] = {
@@ -656,6 +683,5 @@ long do_syscall(long a0, long a1, long a2, long a3, long a4, long a5, unsigned l
     return sys_stub_nosys();
 
   f = (void*)pa2kva(f);
-
   return f(a0, a1, a2, a3, a4, a5, n);
 }
diff --git a/pk/syscall.h b/pk/syscall.h
index 31fb3be..a886a6b 100644
--- a/pk/syscall.h
+++ b/pk/syscall.h
@@ -58,6 +58,8 @@
 #define SYS_set_robust_list 99
 #define SYS_madvise 233
 #define SYS_statx 291
+#define SYS_cx_open 51
+#define SYS_cx_close 52
 
 #define OLD_SYSCALL_THRESHOLD 1024
 #define SYS_open 1024
