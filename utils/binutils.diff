diff --git a/gas/config/tc-riscv.c b/gas/config/tc-riscv.c
index 297bb9b2a81..ae7ca7b24f3 100644
--- a/gas/config/tc-riscv.c
+++ b/gas/config/tc-riscv.c
@@ -1349,6 +1349,18 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)
 	      goto unknown_validate_operand;
 	    }
 	  break; /* end RVV */
+
+  case 'G': /* CFU */ // FIXME 
+	  switch (*++oparg)
+	    {
+	    case 'x': used_bits |= ENCODE_CFU_RTYPE_CFID (-1U); break;
+	    case 'y': used_bits |= ENCODE_CFU_ITYPE_CFID (-1U); break;
+	    case 'j': used_bits |= ENCODE_CFU_ITYPE_IMM  (-1U); break;
+	    default:
+	      goto unknown_validate_operand;
+	    }
+	break; /* end CFU */
+
 	case ',': break;
 	case '(': break;
 	case ')': break;
@@ -3117,7 +3129,52 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,
 		  goto unknown_riscv_ip_operand;
 		}
 	      break; /* end RVV */
+    case 'G': /* CFU */ // FIXME 
+      switch (*++oparg)
+		{
+		case 'x': 
+		  my_getExpression (imm_expr, asarg);
+		  check_absolute_expr (ip, imm_expr, FALSE);
+		  if (imm_expr->X_add_number < 0
+		      || imm_expr->X_add_number >= 1024)
+		    as_bad (_("bad value for custom function identifier field, "
+			      "value must be 0...1023"));
+		  ip->insn_opcode
+		    |= ENCODE_CFU_RTYPE_CFID (imm_expr->X_add_number);
+		  imm_expr->X_op = O_absent;
+		  asarg = expr_parse_end;
+		  continue;
 
+		case 'y': 
+		  my_getExpression (imm_expr, asarg);
+		  check_absolute_expr (ip, imm_expr, FALSE);
+		  if (imm_expr->X_add_number < 0
+		      || imm_expr->X_add_number >= 16)
+		    as_bad (_("bad value for custom function identifier field, "
+			      "value must be 0...15"));
+		  ip->insn_opcode
+		    |= ENCODE_CFU_ITYPE_CFID (imm_expr->X_add_number);
+		  imm_expr->X_op = O_absent;
+		  asarg = expr_parse_end;
+		  continue;
+
+		case 'j': 
+		  my_getExpression (imm_expr, asarg);
+		  check_absolute_expr (ip, imm_expr, FALSE);
+		  if (imm_expr->X_add_number > 127
+		      || imm_expr->X_add_number < -128)
+		    as_bad (_("bad value for custom function identifier field, "
+			      "value must be -127...128"));
+		  ip->insn_opcode
+		    |= ENCODE_CFU_ITYPE_IMM (imm_expr->X_add_number);
+		  imm_expr->X_op = O_absent;
+		  asarg = expr_parse_end;
+		  continue;
+
+		default:
+		  goto unknown_riscv_ip_operand;
+		}
+	  break; /* end CFU */
 	    case ',':
 	      if (*asarg++ == *oparg)
 		continue;
diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 90f44153750..1414f69b994 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -21,6 +21,14 @@
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
 /* Instruction opcode macros.  */
+
+/************ CFU ************/
+#define MATCH_CFU_IMM 0x2b
+#define MASK_CFU_IMM 0x707f
+#define MATCH_CFU_REG 0xb
+#define MASK_CFU_REG 0x7f
+/*****************************/
+
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
@@ -2948,6 +2956,10 @@
 #define CSR_VLENB 0xc22
 #endif /* RISCV_ENCODING_H */
 #ifdef DECLARE_INSN
+/* CFU */
+DECLARE_INSN(cfu_imm, MATCH_CFU_IMM, MASK_CFU_IMM)
+DECLARE_INSN(cfu_reg, MATCH_CFU_REG, MASK_CFU_REG)
+/* CFU end */
 DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)
 DECLARE_INSN(srli_rv32, MATCH_SRLI_RV32, MASK_SRLI_RV32)
 DECLARE_INSN(srai_rv32, MATCH_SRAI_RV32, MASK_SRAI_RV32)
diff --git a/include/opcode/riscv.h b/include/opcode/riscv.h
index d859f44fc92..3a1ed2564e6 100644
--- a/include/opcode/riscv.h
+++ b/include/opcode/riscv.h
@@ -109,6 +109,15 @@ static inline unsigned int riscv_insn_length (insn_t insn)
 #define EXTRACT_RVV_VC_IMM(x) \
   (RV_X(x, 20, 11))
 
+/* CFU */
+#define EXTRACT_CFU_RTYPE_CFID(x) \
+  (RV_X(x, 12, 3) | (RV_X(x, 25, 7) << 3))
+#define EXTRACT_CFU_ITYPE_CFID(x) \
+  (RV_X(x, 20, 4))
+#define EXTRACT_CFU_ITYPE_IMM(x) \
+  (RV_X(x, 24, 8) | (RV_IMM_SIGN(x) << 8))
+/* end CFU */
+
 #define ENCODE_ITYPE_IMM(x) \
   (RV_X(x, 0, 12) << 20)
 #define ENCODE_STYPE_IMM(x) \
@@ -156,6 +165,15 @@ static inline unsigned int riscv_insn_length (insn_t insn)
 #define ENCODE_RVV_VI_UIMM6(x) \
   (RV_X(x, 0, 5) << 15 | RV_X(x, 5, 1) << 26)
 
+/* CFU */
+#define ENCODE_CFU_RTYPE_CFID(x) \
+  ((RV_X(x, 0, 3) << 12) | (RV_X(x, 3, 7) << 25))
+#define ENCODE_CFU_ITYPE_CFID(x) \
+  (RV_X(x, 0, 4) << 20)
+#define ENCODE_CFU_ITYPE_IMM(x) \
+  (RV_X(x, 0, 8) << 24)
+/* end CFU */
+
 #define VALID_ITYPE_IMM(x) (EXTRACT_ITYPE_IMM(ENCODE_ITYPE_IMM(x)) == (x))
 #define VALID_STYPE_IMM(x) (EXTRACT_STYPE_IMM(ENCODE_STYPE_IMM(x)) == (x))
 #define VALID_BTYPE_IMM(x) (EXTRACT_BTYPE_IMM(ENCODE_BTYPE_IMM(x)) == (x))
diff --git a/opcodes/riscv-dis.c b/opcodes/riscv-dis.c
index 827d9b67437..3fac37debad 100644
--- a/opcodes/riscv-dis.c
+++ b/opcodes/riscv-dis.c
@@ -415,6 +415,22 @@ print_insn_args (const char *oparg, insn_t l, bfd_vma pc, disassemble_info *info
 	    }
 	  break;
 
+	case 'G': /* CFU */ // FIXME
+	  switch (*++oparg)
+	    {
+	    case 'x':
+	      print (info->stream, dis_style_immediate, "%d",
+		     (int)EXTRACT_CFU_RTYPE_CFID (l));
+	      break;
+	    case 'y':
+	      print (info->stream, dis_style_immediate, "%d",
+		     (int)EXTRACT_CFU_ITYPE_CFID (l));
+	      break;
+	    case 'j':
+	      print (info->stream, dis_style_immediate, "%d",
+		     (int)EXTRACT_CFU_ITYPE_IMM (l));
+	      break;
+	    } /* end CFU */
 	case ',':
 	case '(':
 	case ')':
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index 533e3f4a079..d1d9332d948 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -340,6 +340,8 @@ const struct riscv_opcode riscv_opcodes[] =
 {"pause",       0, INSN_CLASS_ZIHINTPAUSE, "", MATCH_PAUSE, MASK_PAUSE, match_opcode, 0 },
 
 /* Basic RVI instructions and aliases.  */
+{"cfu_reg",     0, INSN_CLASS_I, "Gx,d,s,t",  MATCH_CFU_REG, MASK_CFU_REG, match_opcode, 0 },
+{"cfu_imm",     0, INSN_CLASS_I, "Gy,d,s,Gj", MATCH_CFU_IMM, MASK_CFU_IMM, match_opcode, 0 },
 {"unimp",       0, INSN_CLASS_C, "",          0, 0xffffU, match_opcode, INSN_ALIAS },
 {"unimp",       0, INSN_CLASS_I, "",          MATCH_CSRRW|(CSR_CYCLE << OP_SH_CSR), 0xffffffffU,  match_opcode, 0 }, /* csrw cycle, x0  */
 {"ebreak",      0, INSN_CLASS_C, "",          MATCH_C_EBREAK, MASK_C_EBREAK, match_opcode, INSN_ALIAS },
