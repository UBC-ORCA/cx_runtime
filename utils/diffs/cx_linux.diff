diff --git a/Kbuild b/Kbuild
index 464b34a08f51..2880b03fa60b 100644
--- a/Kbuild
+++ b/Kbuild
@@ -97,3 +97,4 @@ obj-$(CONFIG_SAMPLES)	+= samples/
 obj-$(CONFIG_NET)	+= net/
 obj-y			+= virt/
 obj-y			+= $(ARCH_DRIVERS)
+obj-y           += cx_sys/
diff --git a/arch/riscv/include/asm/asm-prototypes.h b/arch/riscv/include/asm/asm-prototypes.h
index 36b955c762ba..637cd642e6cc 100644
--- a/arch/riscv/include/asm/asm-prototypes.h
+++ b/arch/riscv/include/asm/asm-prototypes.h
@@ -24,6 +24,7 @@ DECLARE_DO_ERROR_INFO(do_trap_ecall_u);
 DECLARE_DO_ERROR_INFO(do_trap_ecall_s);
 DECLARE_DO_ERROR_INFO(do_trap_ecall_m);
 DECLARE_DO_ERROR_INFO(do_trap_break);
+DECLARE_DO_ERROR_INFO(do_trap_first_cx_use);
 
 asmlinkage void handle_bad_stack(struct pt_regs *regs);
 asmlinkage void do_page_fault(struct pt_regs *regs);
diff --git a/arch/riscv/include/asm/switch_to.h b/arch/riscv/include/asm/switch_to.h
index f90d8e42f3c7..0971d62bf4aa 100644
--- a/arch/riscv/include/asm/switch_to.h
+++ b/arch/riscv/include/asm/switch_to.h
@@ -8,12 +8,15 @@
 
 #include <linux/jump_label.h>
 #include <linux/sched/task_stack.h>
+#include "../../../../../../../research/riscv-tools/cx_runtime/include/utils.h"
 #include <asm/vector.h>
 #include <asm/cpufeature.h>
 #include <asm/processor.h>
 #include <asm/ptrace.h>
 #include <asm/csr.h>
 
+#include <linux/kern_funcs.h>
+
 #ifdef CONFIG_FPU
 extern void __fstate_save(struct task_struct *save_to);
 extern void __fstate_restore(struct task_struct *restore_from);
@@ -70,6 +73,26 @@ static __always_inline bool has_fpu(void) { return false; }
 #define __switch_to_fpu(__prev, __next) do { } while (0)
 #endif
 
+static inline void __switch_to_cx(struct task_struct *prev,
+				   struct task_struct *next)
+{
+	// don't context switch if it's the same process
+	// if (prev->mcx_table != NULL && prev->mcx_table == next->mcx_table) {
+	// 	pr_info("same process!\n");
+	// 	return;
+	// }
+	/* Saving */
+	if (prev->mcx_table != NULL) {
+		cx_context_save(prev);
+	}
+	
+	/* Restoring */
+	if (next->mcx_table != NULL) {
+		cx_context_restore(next);
+	}
+
+}
+
 extern struct task_struct *__switch_to(struct task_struct *,
 				       struct task_struct *);
 
@@ -81,6 +104,7 @@ do {							\
 		__switch_to_fpu(__prev, __next);	\
 	if (has_vector())					\
 		__switch_to_vector(__prev, __next);	\
+	__switch_to_cx(__prev, __next);         \
 	((last) = __switch_to(__prev, __next));		\
 } while (0)
 
diff --git a/arch/riscv/kernel/traps.c b/arch/riscv/kernel/traps.c
index a1b9be3c4332..9722f85d0c11 100644
--- a/arch/riscv/kernel/traps.c
+++ b/arch/riscv/kernel/traps.c
@@ -32,6 +32,8 @@
 #include <asm/vector.h>
 #include <asm/irq_stack.h>
 
+#include "../../../../research/riscv-tools/cx_runtime/include/utils.h"
+
 int show_unhandled_signals = 1;
 
 static DEFINE_SPINLOCK(die_lock);
@@ -113,7 +115,6 @@ void die(struct pt_regs *regs, const char *str)
 void do_trap(struct pt_regs *regs, int signo, int code, unsigned long addr)
 {
 	struct task_struct *tsk = current;
-
 	if (show_unhandled_signals && unhandled_signal(tsk, signo)
 	    && printk_ratelimit()) {
 		pr_info("%s[%d]: unhandled signal %d code 0x%x at 0x" REG_FMT,
@@ -169,6 +170,14 @@ DO_ERROR_INFO(do_trap_insn_fault,
 asmlinkage __visible __trap_section void do_trap_insn_illegal(struct pt_regs *regs)
 {
 	bool handled;
+	u32 insn = (u32)regs->badaddr;
+	uint opc = insn & ((1<<7)-1);
+
+	if (opc == CX_REG_TYPE || opc == CX_IMM_TYPE || opc == CX_FLEX_TYPE) {
+		do_trap_first_cx_use(regs);
+		return;
+	}
+
 
 	if (user_mode(regs)) {
 		irqentry_enter_from_user_mode(regs);
@@ -339,6 +348,23 @@ asmlinkage __visible __trap_section void do_trap_ecall_u(struct pt_regs *regs)
 
 }
 
+/* TODO (cx, Brandon): This is incredibly hacky - Used for virtualization of state. */
+asmlinkage __visible __trap_section void do_trap_first_cx_use(struct pt_regs *regs)
+{
+	long syscall = 461;
+
+	regs->orig_a0 = regs->a0;
+
+	riscv_v_vstate_discard(regs);
+
+	if (syscall >= 0 && syscall < NR_syscalls)
+		syscall_handler(regs, syscall);
+	else if (syscall != -1)
+		regs->a0 = -ENOSYS;
+
+	syscall_exit_to_user_mode(regs);
+}
+
 #ifdef CONFIG_MMU
 asmlinkage __visible noinstr void do_page_fault(struct pt_regs *regs)
 {
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 292c31697248..ef6a6d14af1b 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -39,6 +39,9 @@
 #include <linux/livepatch_sched.h>
 #include <asm/kmap_size.h>
 
+#include <linux/queue.h>
+#include "../../../../research/riscv-tools/cx_runtime/include/cx_kern_structs.h"
+
 /* task_struct member predeclarations (sorted alphabetically): */
 struct audit_context;
 struct bio_list;
@@ -1544,6 +1547,16 @@ struct task_struct {
 	struct user_event_mm		*user_event_mm;
 #endif
 
+	uint cx_status;
+	uint cx_index;
+	uint *mcx_table;
+	cx_os_state_t *cx_os_state_table;
+
+	queue_t *cx_table_avail_indices;
+
+	// TODO: This shouldn't be here - should be in the device_struct.
+	// cx_entry_t cx_map[NUM_CX];
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 756b013fb832..81e95ed4d5b2 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -828,9 +828,19 @@ __SYSCALL(__NR_futex_wake, sys_futex_wake)
 __SYSCALL(__NR_futex_wait, sys_futex_wait)
 #define __NR_futex_requeue 456
 __SYSCALL(__NR_futex_requeue, sys_futex_requeue)
+#define __NR_cx_open 457
+__SYSCALL(__NR_cx_open, sys_cx_open)
+#define __NR_cx_close 458
+__SYSCALL(__NR_cx_close, sys_cx_close)
+#define __NR_context_save 459
+__SYSCALL(__NR_context_save, sys_context_save)
+#define __NR_context_restore 460
+__SYSCALL(__NR_context_restore, sys_context_restore)
+#define __NR_do_nothing 461
+__SYSCALL(__NR_do_nothing, sys_do_nothing)
 
 #undef __NR_syscalls
-#define __NR_syscalls 457
+#define __NR_syscalls 462
 
 /*
  * 32 bit systems traditionally used different
diff --git a/init/init_task.c b/init/init_task.c
index 5727d42149c3..6306c9d1217c 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -210,9 +210,17 @@ struct task_struct init_task
 #ifdef CONFIG_SECCOMP_FILTER
 	.seccomp	= { .filter_count = ATOMIC_INIT(0) },
 #endif
+.mcx_table = NULL,
+.cx_os_state_table = NULL,
+.cx_table_avail_indices = NULL,
+.cx_index = 0,
+.cx_status = 0,
 };
 EXPORT_SYMBOL(init_task);
 
+cx_entry_t cx_map[NUM_CX];
+EXPORT_SYMBOL(cx_map);
+
 /*
  * Initial thread structure. Alignment of this is handled by a special
  * linker map entry.
diff --git a/init/main.c b/init/main.c
index e24b0780fdff..d7deb2147b6b 100644
--- a/init/main.c
+++ b/init/main.c
@@ -111,6 +111,8 @@
 
 #include <kunit/test.h>
 
+#include <linux/kern_funcs.h>
+
 static int kernel_init(void *);
 
 /*
@@ -670,6 +672,7 @@ static void __init setup_command_line(char *command_line)
 	saved_command_line_len = strlen(saved_command_line);
 }
 
+
 /*
  * We need to finalize in a non-__init function or else race conditions
  * between the root thread and the init thread may cause start_kernel to
@@ -693,6 +696,7 @@ noinline void __ref __noreturn rest_init(void)
 	 * we schedule it before we create kthreadd, will OOPS.
 	 */
 	pid = user_mode_thread(kernel_init, NULL, CLONE_FS);
+
 	/*
 	 * Pin init on the boot CPU. Task migration is not properly working
 	 * until sched_init_smp() has been run. It will set the allowed
@@ -727,7 +731,9 @@ noinline void __ref __noreturn rest_init(void)
 	 */
 	schedule_preempt_disabled();
 	/* Call into cpu_idle with preempt disabled */
+
 	cpu_startup_entry(CPUHP_ONLINE);
+
 }
 
 /* Check for early params. */
@@ -1462,9 +1468,10 @@ static int __ref kernel_init(void *unused)
 	rcu_end_inkernel_boot();
 
 	do_sysctl_args();
-
 	if (ramdisk_execute_command) {
 		ret = run_init_process(ramdisk_execute_command);
+		cx_init();
+		pr_info("init pid: %d\n", current->pid);
 		if (!ret)
 			return 0;
 		pr_err("Failed to execute %s (error %d)\n",
diff --git a/kernel/exit.c b/kernel/exit.c
index aedc0832c9f4..e38c31d3ca79 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -75,6 +75,7 @@
 #include <asm/mmu_context.h>
 
 #include "exit.h"
+#include <linux/kern_funcs.h>
 
 /*
  * The default value should be high enough to not crash a system that randomly
@@ -851,6 +852,9 @@ void __noreturn do_exit(long code)
 	audit_free(tsk);
 
 	tsk->exit_code = code;
+	if (tsk->mcx_table && group_dead) {
+		exit_cx(tsk);
+	}
 	taskstats_exit(tsk, group_dead);
 
 	exit_mm();
diff --git a/kernel/fork.c b/kernel/fork.c
index 10917c3e1f03..0d7cff8f6742 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -111,6 +111,8 @@
 #define CREATE_TRACE_POINTS
 #include <trace/events/task.h>
 
+#include <linux/kern_funcs.h>
+
 /*
  * Minimum number of threads to boot the kernel
  */
@@ -1112,6 +1114,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 		return NULL;
 
 	err = arch_dup_task_struct(tsk, orig);
+
 	if (err)
 		goto free_tsk;
 
@@ -1197,6 +1200,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 	tsk->mm_cid_active = 0;
 	tsk->migrate_from_cpu = -1;
 #endif
+
 	return tsk;
 
 free_stack:
@@ -2310,6 +2314,8 @@ __latent_entropy struct task_struct *copy_process(
 			return ERR_PTR(-EINVAL);
 	}
 
+	/* Return some error here */
+
 	/*
 	 * Force any signals received before this point to be delivered
 	 * before the fork happens.  Collect up signals sent to multiple
@@ -2332,6 +2338,7 @@ __latent_entropy struct task_struct *copy_process(
 	p = dup_task_struct(current, node);
 	if (!p)
 		goto fork_out;
+
 	p->flags &= ~PF_KTHREAD;
 	if (args->kthread)
 		p->flags |= PF_KTHREAD;
@@ -2391,8 +2398,22 @@ __latent_entropy struct task_struct *copy_process(
 	INIT_LIST_HEAD(&p->sibling);
 	rcu_copy_process(p);
 	p->vfork_done = NULL;
+
 	spin_lock_init(&p->alloc_lock);
 
+	p->cx_index = cx_csr_read(CX_INDEX); // current->cx_index; ? 
+	p->cx_status = cx_csr_read(CX_STATUS);
+	// We only want to create a new mcx_table, etc. if we have a new process.
+	// if we have a new thread, we want to copy the parent structs.
+	if (current->mcx_table && !(clone_flags & CLONE_THREAD)) {
+		cx_process_alloc(p);
+		cx_copy_table(p);
+	} else {
+		p->mcx_table = current->mcx_table;
+		p->cx_os_state_table = current->cx_os_state_table;
+		p->cx_table_avail_indices = current->cx_table_avail_indices;
+	}
+
 	init_sigpending(&p->pending);
 
 	p->utime = p->stime = p->gtime = 0;
diff --git a/lib/Makefile b/lib/Makefile
index 6b09731d8e61..1268a6f201a7 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -411,6 +411,9 @@ obj-$(CONFIG_GENERIC_LIB_DEVMEM_IS_ALLOWED) += devmem_is_allowed.o
 
 obj-$(CONFIG_FIRMWARE_TABLE) += fw_table.o
 
+obj-y += queue.o
+obj-y += kern_funcs.o
+
 # FORTIFY_SOURCE compile-time behavior tests
 TEST_FORTIFY_SRCS = $(wildcard $(srctree)/$(src)/test_fortify/*-*.c)
 TEST_FORTIFY_LOGS = $(patsubst $(srctree)/$(src)/%.c, %.log, $(TEST_FORTIFY_SRCS))
