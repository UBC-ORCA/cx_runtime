diff --git a/configure b/configure
index d7e0926ff1..84c9a5eaa6 100755
--- a/configure
+++ b/configure
@@ -1462,7 +1462,7 @@ probe_target_compiler() {
     case $1 in
       *-softmmu)
         if do_compiler "$target_cc" $target_cflags -o $TMPO -c $TMPC &&
-          do_compiler "$target_cc" $target_cflags -r -nostdlib -o "${TMPDIR1}/${TMPB}2.o" "$TMPO" -lgcc; then
+          do_compiler "$target_cc" $target_cflags -r -nostdlib -o "${TMPDIR1}/${TMPB}2.o" "$TMPO" -lgcc -lci; then
           got_cross_cc=yes
           break
         fi
diff --git a/meson.build b/meson.build
index 6c77d9687d..dbc3c14eef 100644
--- a/meson.build
+++ b/meson.build
@@ -3752,13 +3752,16 @@ if targetos == 'darwin'
   entitlement = find_program('scripts/entitlement.sh')
 endif
 
+libci_dep = cc.find_library('libci', required: true)
+libmcx_selector_dep = cc.find_library('libmcx_selector', required: true)
+
 emulators = {}
 foreach target : target_dirs
   config_target = config_target_mak[target]
   target_name = config_target['TARGET_NAME']
   target_base_arch = config_target['TARGET_BASE_ARCH']
   arch_srcs = [config_target_h[target]]
-  arch_deps = []
+  arch_deps = [libci_dep, libmcx_selector_dep]
   c_args = ['-DNEED_CPU_H',
             '-DCONFIG_TARGET="@0@-config-target.h"'.format(target),
             '-DCONFIG_DEVICES="@0@-config-devices.h"'.format(target)]
diff --git a/target/riscv/cpu.c b/target/riscv/cpu.c
index 83c7c0cf07..6fff66e0f1 100644
--- a/target/riscv/cpu.c
+++ b/target/riscv/cpu.c
@@ -717,6 +717,10 @@ static void riscv_cpu_dump_state(CPUState *cs, FILE *f, int flags)
             CSR_SPMMASK,
             CSR_MPMBASE,
             CSR_MPMMASK,
+            /* CX */
+            CSR_MCX_SELECTOR,
+            CSR_CX_SELECTOR_INDEX, 
+            CSR_MCX_TABLE
         };
 
         for (i = 0; i < ARRAY_SIZE(dump_csrs); ++i) {
diff --git a/target/riscv/cpu.h b/target/riscv/cpu.h
index d74b361be6..6bdb76b878 100644
--- a/target/riscv/cpu.h
+++ b/target/riscv/cpu.h
@@ -149,6 +149,11 @@ struct CPUArchState {
     target_ulong vtype;
     bool vill;
 
+    /* CX */
+    uint32_t mcx_selector;
+    target_ulong mcx_table;
+    uint32_t cx_selector_index;
+
     target_ulong pc;
     target_ulong load_res;
     target_ulong load_val;
diff --git a/target/riscv/cpu_bits.h b/target/riscv/cpu_bits.h
index ebd7917d49..49d33e52d6 100644
--- a/target/riscv/cpu_bits.h
+++ b/target/riscv/cpu_bits.h
@@ -68,6 +68,11 @@
 #define CSR_VTYPE           0xc21
 #define CSR_VLENB           0xc22
 
+/* CX */
+#define CSR_MCX_TABLE      0x145 // should be BC1, but qemu doesn't like that
+#define CSR_CX_SELECTOR_INDEX 0x011 // should be 800
+#define CSR_MCX_SELECTOR   0x012 // should be BC0
+
 /* VCSR fields */
 #define VCSR_VXSAT_SHIFT    0
 #define VCSR_VXSAT          (0x1 << VCSR_VXSAT_SHIFT)
diff --git a/target/riscv/csr.c b/target/riscv/csr.c
index c50a33397c..05253496ba 100644
--- a/target/riscv/csr.c
+++ b/target/riscv/csr.c
@@ -30,6 +30,8 @@
 #include "qemu/guest-random.h"
 #include "qapi/error.h"
 
+// Brandon included
+#include "exec/cpu_ldst.h"
 
 /* CSR function table public API */
 void riscv_get_csr_ops(int csrno, riscv_csr_operations *ops)
@@ -2990,7 +2992,7 @@ static RISCVException read_satp(CPURISCVState *env, int csrno,
         *val = 0;
         return RISCV_EXCP_NONE;
     }
-    *val = env->satp;
+    *val = env->satp;   
     return RISCV_EXCP_NONE;
 }
 
@@ -4471,6 +4473,71 @@ static RISCVException write_jvt(CPURISCVState *env, int csrno,
     return RISCV_EXCP_NONE;
 }
 
+static RISCVException read_mcx_selector(CPURISCVState *env, int csrno,
+                                target_ulong *val)
+{
+    *val = env->mcx_selector;
+    return RISCV_EXCP_NONE;
+}
+
+static RISCVException write_mcx_selector(CPURISCVState *env, int csrno,
+                                 target_ulong val)
+{
+// #if !defined(CONFIG_USER_ONLY)
+//     env->mstatus |= MSTATUS_VS;
+// #endif
+    env->mcx_selector = val;
+    return RISCV_EXCP_NONE;
+}
+
+
+static RISCVException read_cx_selector_index(CPURISCVState *env, int csrno,
+                                target_ulong *val)
+{
+    *val = env->cx_selector_index;
+    return RISCV_EXCP_NONE;
+}
+
+static RISCVException write_cx_selector_index(CPURISCVState *env, int csrno,
+                                 target_ulong val)
+{
+// #if !defined(CONFIG_USER_ONLY)
+//     env->mstatus |= MSTATUS_VS;
+// #endif
+   
+    env->cx_selector_index = val;
+    int prev_priv = env->priv;
+
+    riscv_cpu_set_mode(env, PRV_S);
+    uintptr_t ra = GETPC();
+    int mmu_idx = riscv_cpu_mmu_index(env, true);
+    MemOpIdx oi = make_memop_idx(MO_32, mmu_idx);
+
+    target_ulong temp = cpu_ldl_mmu(env, env->mcx_table + val * 4, oi, ra);
+    riscv_cpu_set_mode(env, prev_priv);
+  
+    env->mcx_selector = temp;
+    return RISCV_EXCP_NONE;
+}
+
+
+static RISCVException read_mcx_table(CPURISCVState *env, int csrno,
+                                target_ulong *val)
+{
+    *val = env->mcx_table;
+    return RISCV_EXCP_NONE;
+}
+
+static RISCVException write_mcx_table(CPURISCVState *env, int csrno,
+                                 target_ulong val)
+{
+// #if !defined(CONFIG_USER_ONLY)
+//     env->mstatus |= MSTATUS_VS;
+// #endif
+    env->mcx_table = val;
+    return RISCV_EXCP_NONE;
+}
+
 /*
  * Control and Status Register function table
  * riscv_csr_operations::predicate() must be provided for an implemented CSR
@@ -4507,6 +4574,15 @@ riscv_csr_operations csr_ops[CSR_TABLE_SIZE] = {
     /* Zcmt Extension */
     [CSR_JVT] = {"jvt", zcmt, read_jvt, write_jvt},
 
+    /* CX
+    * Note: This should be defined as a machine mode CSR, but I'm not sure how to
+    *       configure the build to allow machine mode
+    */
+    [CSR_MCX_SELECTOR] = { "mcx_selector", any, read_mcx_selector, write_mcx_selector },
+    [CSR_CX_SELECTOR_INDEX] = { "cx_selector_index", any, read_cx_selector_index,
+                                  write_cx_selector_index },
+    [CSR_MCX_TABLE] =  { "mcx_table", any, read_mcx_table, write_mcx_table },
+
 #if !defined(CONFIG_USER_ONLY)
     /* Machine Timers and Counters */
     [CSR_MCYCLE]    = { "mcycle",    any,   read_hpmcounter,
diff --git a/target/riscv/helper.h b/target/riscv/helper.h
index 8a63523851..37fd209f40 100644
--- a/target/riscv/helper.h
+++ b/target/riscv/helper.h
@@ -85,6 +85,9 @@ DEF_HELPER_FLAGS_1(zip, TCG_CALL_NO_RWG_SE, tl, tl)
 DEF_HELPER_FLAGS_2(xperm4, TCG_CALL_NO_RWG_SE, tl, tl, tl)
 DEF_HELPER_FLAGS_2(xperm8, TCG_CALL_NO_RWG_SE, tl, tl, tl)
 
+/* CX */
+DEF_HELPER_4(cx_reg, tl, env, tl, tl, tl)
+
 /* Floating Point - Half Precision */
 DEF_HELPER_FLAGS_3(fadd_h, TCG_CALL_NO_RWG, i64, env, i64, i64)
 DEF_HELPER_FLAGS_3(fsub_h, TCG_CALL_NO_RWG, i64, env, i64, i64)
diff --git a/target/riscv/insn32.decode b/target/riscv/insn32.decode
index 33597fe2bb..c65d3fad63 100644
--- a/target/riscv/insn32.decode
+++ b/target/riscv/insn32.decode
@@ -39,6 +39,9 @@
 %imm_rnum 20:4
 %imm_z6   26:1 15:5
 
+# CX
+%cf_id    25:s7 12:3
+
 # Argument sets:
 &empty
 &b    imm rs2 rs1
@@ -98,6 +101,9 @@
 @k_aes   .. ..... ..... .....  ... ..... ....... &k_aes  shamt=%imm_bs   %rs2 %rs1 %rd
 @i_aes   .. ..... ..... .....  ... ..... ....... &i      imm=%imm_rnum        %rs1 %rd
 
+# Formats CX:
+@cx_r   ....... ..... ..... ... ..... ....... %cf_id %rd %rs1 %rs2
+
 # Formats 64:
 @sh5     .......  ..... .....  ... ..... ....... &shift  shamt=%sh5      %rs1 %rd
 
@@ -1004,3 +1010,6 @@ vgmul_vv    101000 1 ..... 10001 010 ..... 1110111 @r2_vm_1
 vsm4k_vi    100001 1 ..... ..... 010 ..... 1110111 @r_vm_1
 vsm4r_vv    101000 1 ..... 10000 010 ..... 1110111 @r2_vm_1
 vsm4r_vs    101001 1 ..... 10000 010 ..... 1110111 @r2_vm_1
+
+# *** CX ***
+cx_reg     ....... ..... ..... ... ..... 0001011 @cx_r
\ No newline at end of file
diff --git a/target/riscv/machine.c b/target/riscv/machine.c
index fdde243e04..8323a38a2e 100644
--- a/target/riscv/machine.c
+++ b/target/riscv/machine.c
@@ -409,6 +409,11 @@ const VMStateDescription vmstate_riscv_cpu = {
         VMSTATE_UINTTL(env.mscratch, RISCVCPU),
         VMSTATE_UINT64(env.stimecmp, RISCVCPU),
 
+        /* CX */
+        VMSTATE_UINTTL(env.mcx_selector, RISCVCPU),
+        VMSTATE_UINTTL(env.cx_selector_index, RISCVCPU),
+        VMSTATE_UINTTL(env.mcx_table, RISCVCPU),
+
         VMSTATE_END_OF_LIST()
     },
     .subsections = (const VMStateDescription * []) {
diff --git a/target/riscv/meson.build b/target/riscv/meson.build
index a5e0734e7f..b3e60c7d9c 100644
--- a/target/riscv/meson.build
+++ b/target/riscv/meson.build
@@ -22,7 +22,8 @@ riscv_ss.add(files(
   'm128_helper.c',
   'crypto_helper.c',
   'zce_helper.c',
-  'vcrypto_helper.c'
+  'vcrypto_helper.c',
+  'cx_helper.c'
 ))
 
 riscv_system_ss = ss.source_set()
diff --git a/target/riscv/translate.c b/target/riscv/translate.c
index f0be79bb16..0dbefddf89 100644
--- a/target/riscv/translate.c
+++ b/target/riscv/translate.c
@@ -1102,6 +1102,9 @@ static uint32_t opcode_at(DisasContextBase *dcbase, target_ulong pc)
 #include "insn_trans/trans_xthead.c.inc"
 #include "insn_trans/trans_xventanacondops.c.inc"
 
+/* CX */
+#include "insn_trans/trans_cx.c.inc"
+
 /* Include the auto-generated decoder for 16 bit insn */
 #include "decode-insn16.c.inc"
 #include "insn_trans/trans_rvzce.c.inc"
